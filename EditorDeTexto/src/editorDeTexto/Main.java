/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package editorDeTexto;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author yadira
 */
public class Main extends javax.swing.JFrame {

    private boolean cambiosSinGuardar = false;
    private File archivoActual = null;
    String contenidoGuardado = "";
    private int startIndex = 0;
    private String previousSearchText = "";

    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonCut = new javax.swing.JButton();
        jButtonCopy = new javax.swing.JButton();
        jButtonPaste = new javax.swing.JButton();
        jButtonFind = new javax.swing.JButton();
        jButtonFont = new javax.swing.JButton();
        jButtonColor = new javax.swing.JButton();
        jButtonHelp = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        jItemNew = new javax.swing.JMenuItem();
        jItemOpen = new javax.swing.JMenuItem();
        jItemSave = new javax.swing.JMenuItem();
        jItemSaveAs = new javax.swing.JMenuItem();
        jItemSalir = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        jItemCut = new javax.swing.JMenuItem();
        jItemCopy = new javax.swing.JMenuItem();
        jItemPaste = new javax.swing.JMenuItem();
        jItemFind = new javax.swing.JMenuItem();
        format = new javax.swing.JMenu();
        jItemFont = new javax.swing.JMenuItem();
        jItemBackground = new javax.swing.JMenuItem();
        jCheckBoxItemWrap = new javax.swing.JCheckBoxMenuItem();
        help = new javax.swing.JMenu();
        jItemAbout = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/new.png"))); // NOI18N
        jButtonNew.setFocusable(false);
        jButtonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNew);

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/open.png"))); // NOI18N
        jButtonOpen.setFocusable(false);
        jButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonOpen);

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/save.png"))); // NOI18N
        jButtonSave.setFocusable(false);
        jButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSave);

        jButtonCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cut.png"))); // NOI18N
        jButtonCut.setFocusable(false);
        jButtonCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCutActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonCut);

        jButtonCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/copy.png"))); // NOI18N
        jButtonCopy.setFocusable(false);
        jButtonCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonCopy);

        jButtonPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paste.png"))); // NOI18N
        jButtonPaste.setFocusable(false);
        jButtonPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPasteActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonPaste);

        jButtonFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/find.png"))); // NOI18N
        jButtonFind.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFind.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFind);

        jButtonFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/font.png"))); // NOI18N
        jButtonFont.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFont.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFontActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFont);

        jButtonColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/folder_palette.png"))); // NOI18N
        jButtonColor.setFocusable(false);
        jButtonColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonColor);

        jButtonHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/help_about.png"))); // NOI18N
        jButtonHelp.setFocusable(false);
        jButtonHelp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonHelp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonHelp);

        jButtonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/door_out.png"))); // NOI18N
        jButtonExit.setFocusable(false);
        jButtonExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonExit);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        file.setText("File");

        jItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/new.png"))); // NOI18N
        jItemNew.setText("New");
        jItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemNewActionPerformed(evt);
            }
        });
        file.add(jItemNew);

        jItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/open.png"))); // NOI18N
        jItemOpen.setText("Open");
        jItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemOpenActionPerformed(evt);
            }
        });
        file.add(jItemOpen);

        jItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/save.png"))); // NOI18N
        jItemSave.setText("Save");
        jItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemSaveActionPerformed(evt);
            }
        });
        file.add(jItemSave);

        jItemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/saveAsText@3x.png"))); // NOI18N
        jItemSaveAs.setText("Save As...");
        jItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemSaveAsActionPerformed(evt);
            }
        });
        file.add(jItemSaveAs);

        jItemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/door_out.png"))); // NOI18N
        jItemSalir.setText("Exit");
        jItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemSalirActionPerformed(evt);
            }
        });
        file.add(jItemSalir);

        jMenuBar1.add(file);

        edit.setText("Edit");

        jItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cut.png"))); // NOI18N
        jItemCut.setText("Cut");
        jItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemCutActionPerformed(evt);
            }
        });
        edit.add(jItemCut);

        jItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/copy.png"))); // NOI18N
        jItemCopy.setText("Copy");
        jItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemCopyActionPerformed(evt);
            }
        });
        edit.add(jItemCopy);

        jItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paste.png"))); // NOI18N
        jItemPaste.setText("Paste");
        jItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemPasteActionPerformed(evt);
            }
        });
        edit.add(jItemPaste);

        jItemFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/find.png"))); // NOI18N
        jItemFind.setText("Find");
        jItemFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemFindActionPerformed(evt);
            }
        });
        edit.add(jItemFind);

        jMenuBar1.add(edit);

        format.setText("Format");

        jItemFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemFont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/font.png"))); // NOI18N
        jItemFont.setText("Font");
        jItemFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemFontActionPerformed(evt);
            }
        });
        format.add(jItemFont);

        jItemBackground.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jItemBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/folder_palette.png"))); // NOI18N
        jItemBackground.setText("Background color");
        jItemBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemBackgroundActionPerformed(evt);
            }
        });
        format.add(jItemBackground);

        jCheckBoxItemWrap.setText("Word wrap");
        jCheckBoxItemWrap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/T_WordWrap_Sm_N@3x.png"))); // NOI18N
        jCheckBoxItemWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxItemWrapActionPerformed(evt);
            }
        });
        format.add(jCheckBoxItemWrap);

        jMenuBar1.add(format);

        help.setText("Help");

        jItemAbout.setText("About...");
        jItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemAboutActionPerformed(evt);
            }
        });
        help.add(jItemAbout);

        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jItemFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemFindActionPerformed
        String searchText = JOptionPane.showInputDialog(this, "Buscar texto:");

        if (searchText != null && !searchText.isEmpty()) {
            String textToSearch = jTextArea1.getText();
            int index = textToSearch.indexOf(searchText, startIndex);

            if (index != -1) {
                jTextArea1.requestFocus();
                jTextArea1.setSelectionStart(index);
                jTextArea1.setSelectionEnd(index + searchText.length());
                startIndex = index + 1;
                previousSearchText = searchText;
            } else {
                int option = JOptionPane.showConfirmDialog(this, "Texto no encontrado. ¿Desea iniciar una nueva búsqueda desde el inicio?", "Búsqueda no encontrada", JOptionPane.YES_NO_OPTION);

                if (option == JOptionPane.YES_OPTION) {
                    startIndex = 0;
                    jItemFindActionPerformed(evt);
                }
            }
        } else {
        }
    }//GEN-LAST:event_jItemFindActionPerformed

    private void jItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemNewActionPerformed
        jTextArea1.setText((""));
        archivoActual = null;
    }//GEN-LAST:event_jItemNewActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        jItemNewActionPerformed(evt);
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            archivoActual = fileChooser.getSelectedFile();
            updateTitle();
            jTextArea1.requestFocus();

            try {
                BufferedReader reader = new BufferedReader(new FileReader(archivoActual));
                String line;
                StringBuilder content = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n");
                }
                reader.close();
                jTextArea1.setText(content.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jItemOpenActionPerformed

    private void updateTitle() {
        String titulo = "Editor de Texto - ";

        if (archivoActual != null) {
            titulo += archivoActual.getName();
        }

        setTitle(titulo);
    }

    private void saveFile(File archivo, String contenido) {
        try (FileWriter writer = new FileWriter(archivo)) {
            writer.write(contenido);
            archivoActual = archivo;
            updateTitle();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void jItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemSaveActionPerformed
        if (archivoActual == null) {
            JFileChooser fileChooser = new JFileChooser();

            while (true) {

                String contenido = jTextArea1.getText();
                String nombrePredeterminado = "documento.txt";
                fileChooser.setSelectedFile(new File(nombrePredeterminado));

                int result = fileChooser.showSaveDialog(this);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File archivoSeleccionado = fileChooser.getSelectedFile();

                    if (archivoSeleccionado.exists()) {
                        int confirmacion = JOptionPane.showConfirmDialog(
                                this, "El archivo ya existe. ¿Desea reemplazarlo?",
                                "Confirmar reemplazo", JOptionPane.YES_NO_OPTION
                        );

                        if (confirmacion == JOptionPane.NO_OPTION) {
                            continue;
                        }
                    }

                    saveFile(archivoSeleccionado, contenido);
                    break;
                } else {
                    break;
                }
            }
        } else {
            String contenido = jTextArea1.getText();
            saveFile(archivoActual, contenido);
        }
    }//GEN-LAST:event_jItemSaveActionPerformed

    private void jItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemSaveAsActionPerformed
        while (true) {
            JFileChooser fileChooser = new JFileChooser();

            String contenido = jTextArea1.getText();
            String nombrePredeterminado = "documento.txt";
            fileChooser.setSelectedFile(new File(nombrePredeterminado));

            int result = fileChooser.showSaveDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                File archivoSeleccionado = fileChooser.getSelectedFile();

                if (archivoSeleccionado.exists()) {
                    int confirmacion = JOptionPane.showConfirmDialog(
                            this, "El archivo ya existe. ¿Desea reemplazarlo?",
                            "Confirmar reemplazo", JOptionPane.YES_NO_OPTION
                    );

                    if (confirmacion == JOptionPane.NO_OPTION) {
                        continue;
                    }
                }

                saveFile(archivoSeleccionado, contenido);
                break;
            } else {
                break;
            }
        }
    }//GEN-LAST:event_jItemSaveAsActionPerformed

    private void jItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemSalirActionPerformed
        String contenidoActual = jTextArea1.getText();

        if (!contenidoActual.equals(contenidoGuardado)) {
            int opcion = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de salir?", "Exit", JOptionPane.YES_NO_CANCEL_OPTION);

            if (opcion == JOptionPane.YES_OPTION) {
                String contenido = jTextArea1.getText();
                saveFile(archivoActual, contenido);
            } else if (opcion == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        System.exit(0);
    }//GEN-LAST:event_jItemSalirActionPerformed

    private void jItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemCutActionPerformed
        String selectedText = jTextArea1.getSelectedText();

        if (selectedText != null && !selectedText.isEmpty()) {
            StringSelection stringSelection = new StringSelection(selectedText);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);

            int start = jTextArea1.getSelectionStart();
            int end = jTextArea1.getSelectionEnd();
            jTextArea1.replaceRange("", start, end);
        }
    }//GEN-LAST:event_jItemCutActionPerformed

    private void jItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemPasteActionPerformed
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable clipboardData = clipboard.getContents(this);

        if (clipboardData.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            try {
                String text = (String) clipboardData.getTransferData(DataFlavor.stringFlavor);
                int caretPosition = jTextArea1.getCaretPosition();
                jTextArea1.insert(text, caretPosition);
            } catch (UnsupportedFlavorException | IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jItemPasteActionPerformed

    private void jItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemCopyActionPerformed
        String selectedText = jTextArea1.getSelectedText();

        if (selectedText != null && !selectedText.isEmpty()) {
            StringSelection stringSelection = new StringSelection(selectedText);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        }
    }//GEN-LAST:event_jItemCopyActionPerformed

    private void jCheckBoxItemWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxItemWrapActionPerformed
        boolean wrapText = jCheckBoxItemWrap.isSelected();

        jTextArea1.setLineWrap(wrapText);
        jTextArea1.setWrapStyleWord(wrapText);
    }//GEN-LAST:event_jCheckBoxItemWrapActionPerformed

    private void jItemFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemFontActionPerformed
        FontChooser fontChooser = new FontChooser(this);
        fontChooser.setVisible(true);

        Font selectedFont = fontChooser.getSelectedFont();

        if (selectedFont != null) {
            int start = jTextArea1.getSelectionStart();
            int end = jTextArea1.getSelectionEnd();
            jTextArea1.setFont(selectedFont);
            jTextArea1.setSelectionStart(start);
            jTextArea1.setSelectionEnd(end);
        }
    }//GEN-LAST:event_jItemFontActionPerformed

    private void jItemBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemBackgroundActionPerformed
        Color selectedColor = JColorChooser.showDialog(this, "Seleccionar color de fondo", jTextArea1.getBackground());

        if (selectedColor != null) {
            jTextArea1.setBackground(selectedColor);
        }
    }//GEN-LAST:event_jItemBackgroundActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        jItemOpenActionPerformed(evt);
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindActionPerformed
        jItemFindActionPerformed(evt);
    }//GEN-LAST:event_jButtonFindActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        jItemSaveActionPerformed(evt);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCutActionPerformed
        jItemCutActionPerformed(evt);
    }//GEN-LAST:event_jButtonCutActionPerformed

    private void jButtonCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyActionPerformed
        jItemCopyActionPerformed(evt);
    }//GEN-LAST:event_jButtonCopyActionPerformed

    private void jButtonPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPasteActionPerformed
        jItemPasteActionPerformed(evt);
    }//GEN-LAST:event_jButtonPasteActionPerformed

    private void jButtonFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFontActionPerformed
        jItemFontActionPerformed(evt);
    }//GEN-LAST:event_jButtonFontActionPerformed

    private void jButtonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorActionPerformed
        jItemBackgroundActionPerformed(evt);
    }//GEN-LAST:event_jButtonColorActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        jItemSalirActionPerformed(evt);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemAboutActionPerformed
        JOptionPane.showMessageDialog(this,
                "Editor de Texto\nVersión 1.0\n\nDerechos de autor © 2023, Yadira Sainz\nDesarrollado por: Yadira Sainz",
                "Acerca de",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jItemAboutActionPerformed

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        jItemAboutActionPerformed(evt);
    }//GEN-LAST:event_jButtonHelpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JMenu format;
    private javax.swing.JMenu help;
    private javax.swing.JButton jButtonColor;
    private javax.swing.JButton jButtonCopy;
    private javax.swing.JButton jButtonCut;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonFind;
    private javax.swing.JButton jButtonFont;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonPaste;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBoxMenuItem jCheckBoxItemWrap;
    private javax.swing.JMenuItem jItemAbout;
    private javax.swing.JMenuItem jItemBackground;
    private javax.swing.JMenuItem jItemCopy;
    private javax.swing.JMenuItem jItemCut;
    private javax.swing.JMenuItem jItemFind;
    private javax.swing.JMenuItem jItemFont;
    private javax.swing.JMenuItem jItemNew;
    private javax.swing.JMenuItem jItemOpen;
    private javax.swing.JMenuItem jItemPaste;
    private javax.swing.JMenuItem jItemSalir;
    private javax.swing.JMenuItem jItemSave;
    private javax.swing.JMenuItem jItemSaveAs;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
